//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Inputs/ControlManager.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlManager : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlManager()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ControlManager"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""7d957ef5-fcf7-48e5-87a9-aa2393af686e"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""f7db0e59-81dd-4690-9bad-81b5707a4fa1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""ee83c382-8010-4f13-8228-e6968da37867"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ButtonPressed"",
                    ""type"": ""Button"",
                    ""id"": ""341616db-b0ff-4335-a5e5-de429772938c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ButtonReleased"",
                    ""type"": ""Button"",
                    ""id"": ""7e62d49a-e582-4941-a78e-67665c101425"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Show UI"",
                    ""type"": ""Button"",
                    ""id"": ""acb11531-6311-47b8-9465-c6d41b461a65"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectItem"",
                    ""type"": ""Button"",
                    ""id"": ""2bedccc8-5387-4b71-b7ec-ceb875dc64f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3aa483fc-bc54-4b7b-9ed9-6a0ec348cedc"",
                    ""path"": ""<OculusTouchController>{LeftHand}/thumbstick"",
                    ""interactions"": ""Hold(duration=0.3,pressPoint=0.3)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""49b57d93-1407-4d38-8d6f-aa8788bebf57"",
                    ""path"": ""<OculusTouchController>{RightHand}/thumbstick"",
                    ""interactions"": ""Press(pressPoint=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dca61388-3ec3-4ce2-b632-b21068fd3b2b"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8356f151-25f6-46a7-9525-087c07af4fbc"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.5)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12b08438-c76f-497b-9a10-fa468b1ed71f"",
                    ""path"": ""<OculusTouchController>{LeftHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa371368-f301-4040-9f8f-c3f84b7c8433"",
                    ""path"": ""<OculusTouchController>{RightHand}/triggerPressed"",
                    ""interactions"": ""Press(pressPoint=0.2,behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ButtonReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13ed696c-2c52-48a9-8800-5df02ba12e14"",
                    ""path"": ""<OculusTouchController>{LeftHand}/gripPressed"",
                    ""interactions"": ""Press(pressPoint=0.2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Show UI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70a9cfca-8d94-4d69-9d3b-7dd21c17f002"",
                    ""path"": ""<OculusTouchController>{LeftHand}/primaryButton"",
                    ""interactions"": ""Press(pressPoint=0.4)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Movement = m_Gameplay.FindAction("Movement", throwIfNotFound: true);
        m_Gameplay_Rotation = m_Gameplay.FindAction("Rotation", throwIfNotFound: true);
        m_Gameplay_ButtonPressed = m_Gameplay.FindAction("ButtonPressed", throwIfNotFound: true);
        m_Gameplay_ButtonReleased = m_Gameplay.FindAction("ButtonReleased", throwIfNotFound: true);
        m_Gameplay_ShowUI = m_Gameplay.FindAction("Show UI", throwIfNotFound: true);
        m_Gameplay_SelectItem = m_Gameplay.FindAction("SelectItem", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Movement;
    private readonly InputAction m_Gameplay_Rotation;
    private readonly InputAction m_Gameplay_ButtonPressed;
    private readonly InputAction m_Gameplay_ButtonReleased;
    private readonly InputAction m_Gameplay_ShowUI;
    private readonly InputAction m_Gameplay_SelectItem;
    public struct GameplayActions
    {
        private @ControlManager m_Wrapper;
        public GameplayActions(@ControlManager wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Gameplay_Movement;
        public InputAction @Rotation => m_Wrapper.m_Gameplay_Rotation;
        public InputAction @ButtonPressed => m_Wrapper.m_Gameplay_ButtonPressed;
        public InputAction @ButtonReleased => m_Wrapper.m_Gameplay_ButtonReleased;
        public InputAction @ShowUI => m_Wrapper.m_Gameplay_ShowUI;
        public InputAction @SelectItem => m_Wrapper.m_Gameplay_SelectItem;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMovement;
                @Rotation.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnRotation;
                @ButtonPressed.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonPressed;
                @ButtonPressed.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonPressed;
                @ButtonPressed.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonPressed;
                @ButtonReleased.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonReleased;
                @ButtonReleased.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonReleased;
                @ButtonReleased.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnButtonReleased;
                @ShowUI.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowUI;
                @ShowUI.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowUI;
                @ShowUI.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnShowUI;
                @SelectItem.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelectItem;
                @SelectItem.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelectItem;
                @SelectItem.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnSelectItem;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @ButtonPressed.started += instance.OnButtonPressed;
                @ButtonPressed.performed += instance.OnButtonPressed;
                @ButtonPressed.canceled += instance.OnButtonPressed;
                @ButtonReleased.started += instance.OnButtonReleased;
                @ButtonReleased.performed += instance.OnButtonReleased;
                @ButtonReleased.canceled += instance.OnButtonReleased;
                @ShowUI.started += instance.OnShowUI;
                @ShowUI.performed += instance.OnShowUI;
                @ShowUI.canceled += instance.OnShowUI;
                @SelectItem.started += instance.OnSelectItem;
                @SelectItem.performed += instance.OnSelectItem;
                @SelectItem.canceled += instance.OnSelectItem;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnButtonPressed(InputAction.CallbackContext context);
        void OnButtonReleased(InputAction.CallbackContext context);
        void OnShowUI(InputAction.CallbackContext context);
        void OnSelectItem(InputAction.CallbackContext context);
    }
}
